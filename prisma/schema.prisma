generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  file_id    String
  url        String
  user_id    String?   @db.ObjectId
  user       user?     @relation(fields: [user_id], references: [id])
  products   products? @relation(fields: [productsId], references: [id])
  productsId String?   @db.ObjectId
  post       post?     @relation(fields: [postId], references: [id])
  postId     String?   @db.ObjectId
}

// Separate model for shop avatars if you need unique constraint
model shop_avatars {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  file_id String
  url     String
  shopId  String @unique @db.ObjectId
  shop    shops  @relation(fields: [shopId], references: [id])
}

model user {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String       @unique
  password    String?
  following   String[]     @db.ObjectId
  avatar      images[]
  isActive    Boolean      @default(true)  // Added missing field
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  shopReviews shopReviews?
  post        post[]
  files       files[]
}

model shopReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id   String?  @unique @db.ObjectId
  user      user?    @relation(fields: [user_id], references: [id])
  rating    Float
  reviews   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopId    String?  @db.ObjectId
  shops     shops?   @relation(fields: [shopId], references: [id])
}

model shops {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  bio           String?
  category      String?
  avatar        shop_avatars? // One-to-one relationship with shop avatar
  coverBanner   String?
  address       String?
  opening_hours String
  website       String?
  socialLinks   Json[]
  ratings       Float         @default(0)
  reviews       shopReviews[]
  isActive      Boolean       @default(true)  // Added missing field for shop
  sellerId      String        @unique @db.ObjectId
  sellers       sellers       @relation(fields: [sellerId], references: [id])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products      products[]
}

model sellers {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  phone_number String
  country      String
  password     String
  stripeId     String?
  isActive     Boolean  @default(true)  // Added missing field
  shop         shops?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  files        files[]
}

model site_config {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
}

model discount_codes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  public_name   String
  discountType  String
  discountValue Float
  discountCode  String   @unique
  sellerId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum productStatus {
  Active
  Pending
  Draft
}

model products {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  slug                  String        @unique
  category              String
  subCategory           String
  short_description     String
  detailed_description  String
  images                images[]
  video_url             String?
  tags                  String[]
  brand                 String?
  colors                String[]
  sizes                 String[]
  starting_date         DateTime?
  ending_date           DateTime?
  stock                 Int
  sale_price            Float
  regular_price         Float
  ratings               Float         @default(5)
  warranty              String?
  custom_specifications Json?
  custom_properties     Json
  isDeleted             Boolean?      @default(false)
  cashOnDelivery        String?
  discount_codes        String[]      @db.ObjectId
  status                productStatus @default(Active)
  deletedAt             DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  shopId                String        @db.ObjectId
  Shop                  shops         @relation(fields: [shopId], references: [id])
  totalSales            Int           @default(0)
}

model post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  images    images[]
  userId    String?  @db.ObjectId
  user      user?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FileStatus {
  Pending
  Sent
  Delivered
  Read
}

model files {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  file_id      String // ImageKit file ID for deletion
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  fileHash     String?    // Added missing field
  userId       String     @db.ObjectId
  user         user       @relation(fields: [userId], references: [id])
  sellerId     String     @db.ObjectId
  seller       sellers    @relation(fields: [sellerId], references: [id])
  status       FileStatus @default(Pending)
  message      String? // Optional message to send with the file
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  sentAt       DateTime?
  readAt       DateTime?
}